// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MisContext))]
    [Migration("20251017080558_MisMigration")]
    partial class MisMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("collection_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CollectionId")
                        .HasName("PK__collecti__53D3A5CAB5272981");

                    b.HasIndex(new[] { "UserId", "CollectionName" }, "UC_UserCollectionName")
                        .IsUnique();

                    b.ToTable("collections", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CollectionMeme", b =>
                {
                    b.Property<int>("CollectionMemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("collection_meme_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionMemeId"));

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.HasKey("CollectionMemeId")
                        .HasName("PK__collecti__019B66EEB1148A19");

                    b.HasIndex("MemeId");

                    b.HasIndex(new[] { "CollectionId", "MemeId" }, "UC_CollectionMeme")
                        .IsUnique();

                    b.ToTable("collection_memes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime?>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("comment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("comment_text");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("edited_at");

                    b.Property<bool?>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_edited");

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_comment_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("PK__comments__E79576870956273D");

                    b.HasIndex("MemeId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Meme", b =>
                {
                    b.Property<int>("MemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_public");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upload_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("MemeId")
                        .HasName("PK__memes__5AD2578F5B5FFD53");

                    b.HasIndex("UserId");

                    b.ToTable("memes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MemeMetadatum", b =>
                {
                    b.Property<int>("MetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("metadata_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetadataId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("file_format");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mime_type");

                    b.Property<int>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("MetadataId")
                        .HasName("PK__meme_met__C1088FC4BB567167");

                    b.HasIndex(new[] { "MemeId" }, "UQ__meme_met__5AD2578E3117FEA1")
                        .IsUnique();

                    b.ToTable("meme_metadata", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MemeTag", b =>
                {
                    b.Property<int>("MemeTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("meme_tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemeTagId"));

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<DateTime?>("TaggedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("tagged_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MemeTagId")
                        .HasName("PK__meme_tag__16773B431689E4B4");

                    b.HasIndex("TagId");

                    b.HasIndex(new[] { "MemeId", "TagId" }, "UC_MemeTag")
                        .IsUnique();

                    b.ToTable("meme_tags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<DateTime?>("ReactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("reaction_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("reaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReactionId")
                        .HasName("PK__reaction__36A9D29816879338");

                    b.HasIndex("MemeId");

                    b.HasIndex(new[] { "UserId", "MemeId", "ReactionType" }, "UC_UserMemeReaction")
                        .IsUnique();

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__roles__760965CCD6CF1D64");

                    b.HasIndex(new[] { "RoleName" }, "UQ__roles__783254B187997332")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId")
                        .HasName("PK__tags__4296A2B6C2048044");

                    b.HasIndex(new[] { "TagName" }, "UQ__tags__E298655CA7AA5A3E")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UploadStat", b =>
                {
                    b.Property<int>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatId"));

                    b.Property<int?>("DownloadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("download_count");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastViewed")
                        .HasColumnType("datetime")
                        .HasColumnName("last_viewed");

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<int?>("ShareCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("share_count");

                    b.Property<int?>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("views_count");

                    b.HasKey("StatId")
                        .HasName("PK__upload_s__B8A52560A415E415");

                    b.HasIndex(new[] { "MemeId" }, "UQ__upload_s__5AD2578EADFA737A")
                        .IsUnique();

                    b.ToTable("upload_stats", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BE370F7F35AA08");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E616448A45D4C")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__users__F3DBC572F302E448")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserRoleId")
                        .HasName("PK__user_rol__B8D9ABA2CDA4630A");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserId", "RoleId" }, "UC_UserRole")
                        .IsUnique();

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Collection", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__collectio__user___693CA210");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.CollectionMeme", b =>
                {
                    b.HasOne("Domain.Models.Collection", "Collection")
                        .WithMany("CollectionMemes")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__collectio__colle__6E01572D");

                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithMany("CollectionMemes")
                        .HasForeignKey("MemeId")
                        .IsRequired()
                        .HasConstraintName("FK__collectio__meme___6EF57B66");

                    b.Navigation("Collection");

                    b.Navigation("Meme");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithMany("Comments")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__comments__meme_i__60A75C0F");

                    b.HasOne("Domain.Models.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK__comments__parent__628FA481");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__comments__user_i__619B8048");

                    b.Navigation("Meme");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Meme", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Memes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__memes__user_id__46E78A0C");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.MemeMetadatum", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithOne("MemeMetadatum")
                        .HasForeignKey("Domain.Models.MemeMetadatum", "MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__meme_meta__meme___4BAC3F29");

                    b.Navigation("Meme");
                });

            modelBuilder.Entity("Domain.Models.MemeTag", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithMany("MemeTags")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__meme_tags__meme___5441852A");

                    b.HasOne("Domain.Models.Tag", "Tag")
                        .WithMany("MemeTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK__meme_tags__tag_i__5535A963");

                    b.Navigation("Meme");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Models.Reaction", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithMany("Reactions")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__reactions__meme___5AEE82B9");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__reactions__user___5BE2A6F2");

                    b.Navigation("Meme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UploadStat", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithOne("UploadStat")
                        .HasForeignKey("Domain.Models.UploadStat", "MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__upload_st__meme___76969D2E");

                    b.Navigation("Meme");
                });

            modelBuilder.Entity("Domain.Models.UserRole", b =>
                {
                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__user_role__role___4222D4EF");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_role__user___412EB0B6");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Collection", b =>
                {
                    b.Navigation("CollectionMemes");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("Domain.Models.Meme", b =>
                {
                    b.Navigation("CollectionMemes");

                    b.Navigation("Comments");

                    b.Navigation("MemeMetadatum");

                    b.Navigation("MemeTags");

                    b.Navigation("Reactions");

                    b.Navigation("UploadStat");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Navigation("MemeTags");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Comments");

                    b.Navigation("Memes");

                    b.Navigation("Reactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
