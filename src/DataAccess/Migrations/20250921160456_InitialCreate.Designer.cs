// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MisContext))]
    [Migration("20250921160456_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CollectionMeme", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.HasKey("CollectionId", "MemeId")
                        .HasName("PK__collecti__B67E80B26976637C");

                    b.HasIndex("MemeId");

                    b.ToTable("collection_memes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("collection_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CollectionId")
                        .HasName("PK__collecti__53D3A5CAA30B7500");

                    b.HasIndex("UserId");

                    b.ToTable("collections", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime?>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("comment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("comment_text");

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("PK__comments__E7957687FA3CF74E");

                    b.HasIndex("MemeId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Meme", b =>
                {
                    b.Property<int>("MemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upload_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("MemeId")
                        .HasName("PK__memes__5AD2578F87F22068");

                    b.HasIndex("UserId");

                    b.ToTable("memes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MemeMetadatum", b =>
                {
                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Shares")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("shares");

                    b.Property<int?>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("views");

                    b.HasKey("MemeId")
                        .HasName("PK__meme_met__5AD2578F8F16AD1D");

                    b.ToTable("meme_metadata", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<DateTime?>("ReactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("reaction_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("reaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReactionId")
                        .HasName("PK__reaction__36A9D29813A75BC4");

                    b.HasIndex("MemeId");

                    b.HasIndex("UserId");

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__roles__760965CC0823FF07");

                    b.HasIndex(new[] { "RoleName" }, "UQ__roles__783254B1EC8A87C0")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId")
                        .HasName("PK__tags__4296A2B6691AE076");

                    b.HasIndex(new[] { "TagName" }, "UQ__tags__E298655CBAEA6588")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UploadStat", b =>
                {
                    b.Property<int>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatId"));

                    b.Property<DateTime?>("LastUploadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_upload_date");

                    b.Property<int?>("TotalViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("total_views");

                    b.Property<int?>("UploadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("upload_count");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("StatId")
                        .HasName("PK__upload_s__B8A52560473B37ED");

                    b.HasIndex("UserId");

                    b.ToTable("upload_stats", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BE370FF16AC13E");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E61643B91F4FA")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__users__F3DBC572F86B8864")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MemeTag", b =>
                {
                    b.Property<int>("MemeId")
                        .HasColumnType("int")
                        .HasColumnName("meme_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("MemeId", "TagId")
                        .HasName("PK__meme_tag__2EFB3DA44C7753AF");

                    b.HasIndex("TagId");

                    b.ToTable("meme_tags", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__user_rol__6EDEA153CC4A6AC6");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("CollectionMeme", b =>
                {
                    b.HasOne("Domain.Models.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__collectio__colle__42ACE4D4");

                    b.HasOne("Domain.Models.Meme", null)
                        .WithMany()
                        .HasForeignKey("MemeId")
                        .IsRequired()
                        .HasConstraintName("FK__collectio__meme___43A1090D");
                });

            modelBuilder.Entity("Domain.Models.Collection", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__collectio__user___3FD07829");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithMany("Comments")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__comments__meme_i__3B0BC30C");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__comments__user_i__3BFFE745");

                    b.Navigation("Meme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Meme", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Memes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__memes__user_id__2610A626");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.MemeMetadatum", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithOne("MemeMetadatum")
                        .HasForeignKey("Domain.Models.MemeMetadatum", "MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__meme_meta__meme___2BC97F7C");

                    b.Navigation("Meme");
                });

            modelBuilder.Entity("Domain.Models.Reaction", b =>
                {
                    b.HasOne("Domain.Models.Meme", "Meme")
                        .WithMany("Reactions")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__reactions__meme___36470DEF");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__reactions__user___373B3228");

                    b.Navigation("Meme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UploadStat", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UploadStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__upload_st__user___4865BE2A");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemeTag", b =>
                {
                    b.HasOne("Domain.Models.Meme", null)
                        .WithMany()
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__meme_tags__meme___318258D2");

                    b.HasOne("Domain.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__meme_tags__tag_i__32767D0B");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_role__role___22401542");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_role__user___214BF109");
                });

            modelBuilder.Entity("Domain.Models.Meme", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MemeMetadatum");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Comments");

                    b.Navigation("Memes");

                    b.Navigation("Reactions");

                    b.Navigation("UploadStats");
                });
#pragma warning restore 612, 618
        }
    }
}
